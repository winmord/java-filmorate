CREATE TABLE IF NOT EXISTS mpa_rating
(
    mpa_rating_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          varchar NOT NULL,
    description   varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS genre
(
    genre_id INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name     varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS film
(
    film_id       INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name          varchar   NOT NULL,
    description   varchar   NOT NULL,
    release_date  date      NOT NULL,
    duration      INTEGER   NOT NULL,
    mpa_rating_id INTEGER REFERENCES mpa_rating (mpa_rating_id),
    created_at    timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    deleted_at    timestamp
);

CREATE TABLE IF NOT EXISTS film_genre
(
    film_id  INTEGER REFERENCES film (film_id),
    genre_id INTEGER REFERENCES genre (genre_id),
    PRIMARY KEY (film_id, genre_id)
);

CREATE TABLE IF NOT EXISTS users
(
    user_id    INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    email      varchar   NOT NULL,
    login      varchar   NOT NULL,
    name       varchar   NOT NULL,
    birthday   date      NOT NULL,
    created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    deleted_at timestamp
);

CREATE TABLE IF NOT EXISTS friendship
(
    user_id      INTEGER REFERENCES users (user_id),
    friend_id    INTEGER REFERENCES users (user_id),
    created_at   timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    confirmed_at timestamp,
    deleted_at   timestamp,
    PRIMARY KEY (user_id, friend_id)
);

CREATE TABLE IF NOT EXISTS film_like
(
    film_id    INTEGER REFERENCES film (film_id),
    user_id    INTEGER REFERENCES users (user_id),
    created_at timestamp DEFAULT CURRENT_TIMESTAMP NOT NULL,
    deleted_at timestamp,
    PRIMARY KEY (film_id, user_id)
);

CREATE INDEX IF NOT EXISTS film_deleted_at_idx on film(deleted_at);
CREATE INDEX IF NOT EXISTS user_deleted_at_idx on users(deleted_at);